* 基本

- Main 函数首字母必须大写
- 字段：类型的成员变量


* 概述

** 标识符命名风格

| 风格   | 描述                           | 使用建议           |
| Pascla | 首字母全部大写                 | 类型名和成员名     |
| Camel  | 除第一个单词以外首字母全部大写 | 本地变量和方法参数 |
| 全大写 | 全大写                         | 缩写               |

- 字段名称以下划线 _ 开头
- 字段名称以 m_ 开头


** 块

- 可以在任何语法上只需要一条语句而需要的行为有需要一条以上的语句的情况下使用块
- 块后面不要接分号



** 文档注释

三斜杠开始 ///



* 类型、储存、变量

** 预定义类型

   - object
   - 简单类型
     - 非数值类型
       - bool
       - char
     - 数值类型
       - 整数类型
	 - 8
	   - sbyte
	   - byte
	 - 16
	   - short
	   - ushort
	 - 32
	   - int
	   - uint
	 - 64
	   - long
	   - ulong
       - 浮点数类型
	 - decimal
	 - float
	 - double
   - string


** 用户定义类型

- class
- struct
- array
- enum
- delegate
- interface


** 栈&堆

*** 栈

*** 堆


** 值类型&引用类型

*** 值类型

数据存放在栈中


*** 引用类型

引用存放在栈中，而数据存放在堆中。

但是，一个引用类型的成员也是引用类型，那么该成员的引用会存放在堆中，封装在父类型的数据部分。

对于引用类型的任何对象，它所有的数据成员都存放在堆中，无论他们是值类型还是引用类型。


*** 值类型&引用类型 图表

|              | 值类型 | ---    | ---     | 引用类型  |
|--------------+--------+--------+---------+-----------|
| 预定义类型   | sbyte  | bytef  | float   | object    |
|              | short  | ushort | double  | string    |
|              | int    | uint   | char    |           |
|              | long   | ulong  | decimal |           |
|              | bool   |        |         |           |
|              |        |        |         |           |
|--------------+--------+--------+---------+-----------|
| 用户定义类型 | struct |        |         | class     |
|              | enum   |        |         | interface |
|              |        |        |         | delegate  |
|              |        |        |         | array     | 


*** 变量

**** 自动初始化

     - 类的字段
     - 结构字段
     - 数组元素


**** 非自动初始化

     - 本地变量（函数内部的变量）
     - 参数


* 类

- Console

  - Write

  - WriteLine

  - 替换标记： {n} ，0开始

    - 值可以被替换任意次

    - 值可以以任何顺序使用

    - 如果标记溢出，不会产生编译错误但是会出现运行时异常

