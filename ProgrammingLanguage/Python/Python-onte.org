* 助记

- 特殊变量

  - __name__变量

  - __name__属性

    #+BEGIN_SRC python
  def now():
      print("<2017-02-25 六>")
  now._name_
  
    #+END_SRC

- 特殊方法

  - __next__

  - __init__

  - __str__

  - __iter__

  - __getitem__

- sys 模块

  - argv 命令行参数

- 命名规则

  - _xxx_ 这种两个下划线的变量为特殊变量，可以直接被引用。自己的变量一般*不要用这种命名*

  - _xxx 这种命名的函数/变量是非公开(private)，不应该被直接引用

  - __xxx 如果要让内部属性不被外部访问，可以把属性的名称前加上 *两个下划线__* ，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问。但是不能使用 *双下划线结尾*

  - __XXX__ 双下划线开头并且以双下划线结尾的为特殊变量可以访问。

- MixIn

  - ForkingMixIn

  - ThreadingMixIn

  - TCPServer

  - UDPServer


* 函数式编程

** 高阶函数

- map/reduce

- filter

- sorted 排序算法

  - key

    key 指定的函数将作用于每一个元素上，并根据其结果排序，但是排序之后的元素将变成被 key 作用之前的值。

  - reverse = True/False

  #+BEGIN_SRC python
l = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]
def func(x):
return x[0].lower()
sorted(l, key = func)

  #+END_SRC

** 匿名函数

lambda args...: ...

- 匿名函数只有一个表达式
- 匿名函数不用写 return

** 装饰器

import functools
@functools.wraps(func)

#+BEGIN_SRC python
import functools
def log(func):
    @functools.wraps(func)
    def wrapper(*args, **kw):
        print('call %s():' % func._name_)
        return func(*args, **kw)
    return wrapper

#+END_SRC

#+BEGIN_SRC python
import functools
def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            print("%s %s()" & (text, func._name_))
            return func(*arg, **kw)
        return wrapper
    return decorator

#+END_SRC

** 偏函数

functools.partial

#+BEGIN_SRC python
import functools
int2 = functools.parial(int, base=2)
int2('1000')
int2('1000', base=8)

#+END_SRC

#+BEGIN_SRC python
max2 = functools.partial(max, 10)
max2(5, 6, 7)
#args =(10, 5, 6, 7)
#max(*args)

#+END_SRC


* 模块

- 模块可以被包组织
- 包 => 含有 *_init_.py* 文件的目录
- —_init_.py 本身为一个模块，该模块的名称就是包
- 可以有多级目录组成多级层次结构的包结构

- __doc__ / 模块注释

  任何模块的第一行字符串都被视为该模块的文档注释，可以通过变量 _doc_ 访问

- __author__变量表示作者

- __name__='__main__'

  当一个模块在命令行运行时，该模块的_name_变量会被置为 '__main__'

- __xxx__ 这种两个下划线的变量为特殊变量，可以直接被引用。自己的变量一般*不要用这种命名*

- __xxx 这种命名的函数/变量是非公开(private)，不应该被直接引用

** 第三方模块

pip install modle_name


* 面向对象

#+BEGIN_SRC python
class Student(obj);

    def _init_(self, name, score):
        self.name = name
        self.score = score

    def print_score(self):
        print('%s: %s' % (self.name, self.socre))

#+END_SRC

- _init_()

- self

  类中定义的函数第一个参数永远是 self

- __len__

  该方法返回长度，调用 len() 函数时传入的对象必须有 __len__ 方法，因为 len() 函数在内部自动调用它

- 类名后紧跟的 *(obj)* 表示该类是从哪个类继承的

** 访问限制

__xxx 如果要让内部属性不被外部访问，可以把属性的名称前加上 *两个下划线__* ，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问。但是不能使用 *双下划线结尾*


__XXX__ 双下划线开头并且以双下划线结尾的为特殊变量可以访问。


** 获取对象信息

- type()
- types.FunctionType

  函数类型

  #+BEGIN_SRC python
import types
def fn():
    pass
type(fn)==types.FunctionType
  
  #+END_SRC

- GeneratorType

  #+BEGIN_SRC python
import types
type((x for x in range(10)))==types.GeneratorType
  
  #+END_SRC

- isinstance

- isinstance 判断是否是某些类型中的一种

  #+BEGIN_SRC python
isinstance([1, 2, 3], (list, tuple))
isinstance('hello world', (int, str))
  
  #+END_SRC

- dir

  返回一个字符串的 list，可以用来获得一个对象的所有属性和方法

  #+BEGIN_SRC python
dir(int)
  
  #+END_SRC

- hasattr | setattr | getattr

  - hasattr(obj, 'x') --------- 有属性 'x' 吗？

  - setattr(obj, 'y', 19) ----- 设置一个属性 'y'

  - getattr(obj, 'y') --------- 获取属性 'y'

  如果试图获取不存在的属性，会抛出 AttributeError 的错误

  可以传入一个 default 参数，如果属性不存在就返回默认值

  #+BEGIN_SRC python
gettattr(obj, 'z', 404)
  
  #+END_SRC

  *也可以用以上三个函数获取对象的方法*



* 面向对象高级

** 给对象绑定方法

  #+BEGIN_SRC python
def method_name(self, arg):
    pass
from types import MethodType
s.method_name = MethodType(method_name, s)
  
  #+END_SRC

  但是给一个实例绑定的方法对另外一个实例是不起作用的，我们可以将方法绑定到 Class

  #+BEGIN_SRC python
def method_name(self, arg):
pass
ClassName.method_name = method_name
  
  #+END_SRC


** __slots__

  Python允许在定义class的时候，定义一个特殊的__slots__变量，来限制该class实例能添加的属性:

  #+BEGIN_SRC python
class Student(object):
    __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称
  
  #+END_SRC

  *__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的*


** @property

  #+BEGIN_SRC python
class Student(object):

    @property
    def score(self):
        return self._score

    @score.setter
    def score(self, value):
        if not isinstance(value, int):
            raise ValueError('score must be an integer!')
        if value < 0 or value > 100:
            raise ValueError('score must between 0 ~ 100!')
        self._score = value
  
  #+END_SRC

  @property的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值

  如果只定义 getter，就变成了只读属性


** 多重继承

- MixIn

  在设计类的继承关系时，通常，主线都是单一继承下来的，例如，Ostrich继承自Bird。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让Ostrich除了继承自Bird外，再同时继承Runnable。这种设计通常称之为MixIn。

  为了更好地看出继承关系，我们把Runnable和Flyable改为RunnableMixIn和FlyableMixIn。类似的，你还可以定义出肉食动物CarnivorousMixIn和植食动物HerbivoresMixIn，让某个动物同时拥有好几个MixIn：

  #+BEGIN_SRC python
class Dog(Mammal, RunnableMixIn, CarnivorousMixIn):
    pass

  #+END_SRC


** 定制类

- __str__ 打印时调用的特殊方法

- __repr__ 直接显示变量时调用的特殊方法

  *可以写成 __repr__ = __str__*

  #+BEGIN_SRC python
class Student(object):
    def __init__(self, name_):
        self.name = name
    def __str__(self):
        return 'Student obj (name=%s)' %self.name
    __repr__ = __str__
  
  #+END_SRC

- __iter__ 该函数返回一个迭代对象，用于 for... in 循环（可以返回一个拥有 __next__ 方法，并且能够 raise StopIteration() 的鸭子迭代对象

  #+BEGIN_SRC python
class Fib(object):
    def __init__(self):
        self.a, self.b = 0, 1
    def __iter__(self):
        return self
    def __next__(self):
        self.a, self.b = self.a + self.b
        if self.a > 10000:
            raise StopIteration()
        return self.a
  
  #+END_SRC

  此处返回的 self 就是一个拥有 __next__ 方法并且能够在迭代结束是 raise StopIteration() 的鸭子迭代对象

- __getitem__ 使用下标取出元素时调用的函数

  #+BEGIN_SRC python
class Fib(object):
    def __getitem__(self, n):
        if isinstance(n, int): # n是索引
            a, b = 1, 1
            for x in range(n):
                a, b = b, a + b
            return a
        if isinstance(n, slice): # n是切片
            start = n.start
            stop = n.stop
            if start is None:
                start = 0
            a, b = 1, 1
            L = []
            for x in range(stop):
                if x >= start:
                    L.append(a)
                a, b = b, a + b
            return L

  #+END_SRC

  *slice*表示切片

  完整的切片还需要处理 step 参数和负数下标

  此外如果该对象被当成一个 dict 那么 __getitem__ 方法的参数就应该是作为 key 的 obj 而不是下标

- __setitem__

- __delitem__

- __getattr__ / 动态调用

  当调用不存在的属性时，比如score，Python解释器会试图调用__getattr__(self, 'score')来尝试获得属性
  只有在没有找到属性的情况下，才调用__getattr__，已有的属性，比如name，不会在__getattr__中查找。
  如果在调用 __getattr_ 时传入的是 __getattr__ 没有处理的属性，则返回 None
  可以在 __getattr__ 末尾不返回 None，而是按照约定抛出 AttributeError 的错误
  #+BEGIN_SRC python
class Student(object):
    def __getattr__(self, attr):
        if attr == 'age':
            return lambda: 25
        raise AttributeError('/'Student/' object has no attribute /'%s/'' % attr)
  
  #+END_SRC

- __call__ 实现该函数之后，可以这样在实例本身上调用：

  #+BEGIN_SRC python
s = Student('Arisa')
  
  #+END_SRC

- callable 判断一个对象是否能被调用，如果能返回 True

** 枚举

- 使用

  模块： enum.Enum

  #+BEGIN_SRC python
from enum import Enum
Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))
for obj in Month:
    print(obj)

Month(1)
Month(1).name
Month(1).value

#+END_SRC

  value 默认从1开始

- 从 Enum 派生

  #+BEGIN_SRC python
from enum import Enum, unique

@unique
class Week(Enum):
    Sun = 0 # Sun的value被设定为0
    Mon = 1
    Tue = 2
    Wed = 3
    Thu = 4
    Fri = 5
    Sat = 6   

  #+END_SRC

  @unique 装饰器检查确保没有重复值

- 访问

  - Week.Sun
  - Week['Tue']
  - Week.Tue.value
  - Week.Sun.name
  - Week(1)
  - for... in

    #+BEGIN_SRC python
for obj in Week:
    print(obj, obj.name, obj.value)
for n, m in Week.__members__.items():
    print(n, m, m.name, m.value)
    
    #+END_SRC

** 元类

- type()

  - 查看类型

    #+BEGIN_SRC python
class Hello(object):
    def hello(self, name='world'):
        print('Hello, %s.' % name)

h = Hello()

>>> print(type(Hello))
<class 'type'>
>>> print(type(h))
<class 'hello.Hello'>

    #+END_SRC

    Hello 是一个 class，它的类型就是 type
    而 h 是 Hello 的一个对象，它的类型是 Hello

  - 创建类型

    #+BEGIN_SRC python
>>> def fn(self, name='world'): # 先定义函数
...     print('Hello, %s.' % name)
...
>>> Hello = type('Hello', (object,), dict(hello=fn)) # 创建Hello class
>>> h = Hello()
>>> h.hello()
Hello, world.
>>> print(type(Hello))
<class 'type'>
>>> print(type(h))
<class '__main__.Hello'>
    
    #+END_SRC

    type() 的三个参数分别为
    - class
    - 继承集合（如果只有一个父类不要忘记 tuple 的但元素写法
    - 方法名称与函数绑定

- [ ] metaclass

  pass


* 错误，调试，测试

** 错误处理

- try ... except ... as ... ... finally ...

  #+BEGIN_SRC python
try:
    print('try...')
    r = 10 / 0
    print('result:', r)
except ZeroDivisionError as e:
    print('except:', e)
finally:
    print('finally...')
print('END')
  
  #+END_SRC

  如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即except语句块，执行完except后，如果有finally语句块，则执行finally语句块，至此，执行完毕。
  如果没有错误发生，finally也会执行。
  可以用多个 except 语句处理不同的错误
  可以增加一个 else 语句，如果没有错误发生就会执行 else 语句

- BaseException 所有的错误类型都继承自 BaseException

- [[https://docs.python.org/3/library/exceptions.html#exception-hierarchy][常见的错误类型继承关系]]

- logging / 错误记录

  - exception(ERROR) 打印错误信息

- 抛出错误： raise ErrorType()。如果 raise 语句不带任何参数就会把错误原样抛出，还可以将一个捕捉到的错误转换成另一个错误继续抛出

** 调试

- 断言 assert

  #+BEGIN_SRC python
def foo(s):
    n = int(s)
    assert n != 0, 'n is zero'
    return 10/n

def main():
    foo('0')
  
  #+END_SRC

  如果断言失败，assert语句本身会抛出 AssertionError

  可以在启动 python 时 用 -0 参数来关闭 assert

- logging

  #+BEGIN_SRC python
import logging
logging.basicConfig(level=logging.INFO)
  
  #+END_SRC

  - debug
  - info
  - warning
  - error

- pdb

  #+BEGIN_SRC BASH
python3 -m pdb demo.py
  
  #+END_SRC

  - l：查看代码
  - n：单步执行
  - p 变量名：查看变量
  - q：结束调试

- pdb.set_trace()

  import pdb，然后在可能出错的地方放一个 pdb.set_trace() 来设置断点

  - p：查看变量
  - c：继续执行

** 单元测试

- import unittest
- 继承 unittest.TestCase
- 以 test开头的方法为测试方法
- unittest.TestCase 的条件判断
  - 断言 assertEqual()
    #+BEGIN_SRC python
self.assertEqual(abs(-1), 1)
    
#+END_SRC
  - 错误断言 assertRaises()
    #+BEGIN_SRC python
with self.assertRaises(KeyError):
    value = d['empty']
with self.assertRaises(AttributeError)
    value = d.empty
    
    #+END_SRC

*** 运行单元测试

在单元测试的模块中加入：

#+BEGIN_SRC python
if _name_ = '__main__':
    unittest.main()

#+END_SRC

然后直接将单元测试模块直接执行
或者通过命令行参数 -m uinttest 直接运行单元测试：

#+BEGIN_SRC BASH
python3 -m unittest my_test

#+END_SRC

*推荐上面第二种方法* ，应为可以自动运行/批量运行单元测试

- setUp and tearDown

  在每一个测试方法的前后执行

** 文档测试

*** 期望输入和输出的注释代码

#+BEGIN_SRC python
def abs(n):
    '''
    Function to get absolute value of number.

    Example:

    >>> abs(1)
    1
    >>> abs(-1)
    1
    >>> abs(0)
    0
    '''
    return n if n >= 0 else (-n)

#+END_SRC


*** doctest 模块

#+BEGIN_SRC python
if __name__ = '__main__':
    import doctest
    doctest.testmod()

#+END_SRC
#+BEGIN_SRC BASH
python3 my_modle.py

#+END_SRC
